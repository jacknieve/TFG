Mas cosas que hacer:
-Empezar informe
-Seguir diseño

->Cosas que comentar en reunion<-

-> En el diagrama de contexto, deberia poner Mentores y mentorizados o su navegador?

Cosas que añadir en el diseño:
-Diagrama de contexto
-Diagrama del sistema
-Diagrama de clases
-Diagrama de secuencia para casos de uso presentados
-Patrones de diseño utilizados
-Diseño grafico

-Endpoints del rest y que hacen

->Pruebas
->Completar lo que falta de los primeros puntos
->Integracion (igual nos vale con la maquina virtual)

->Redistribuir logica y comentar (tambien meter interfaces, y quizas cambiar algunos nombres de las clases auxiliares)
->Quitar souts innecesarios
->Importante, los mentores no salen en la busqueda si no hay seleccionado ningun área



-Acordarse de añadir lo de JavaMail en la introduccion de la memoria
-Cambiar toda referencia en la memoria y en lo requisitos de enviar informe a mostrar informe en la aplicacion

--Opcional--
->Instituciones

-><-

---->>>Algun dia tengo que ponerme a repasar todos los comentarios del codigo y a añadir o quitar

-Orden de cosas-
(Tambien una pequeña interfaz kk para añadir instituciones con la autentificacion de un admin)


->Cambiar Long de puntuacion a Integer (pero controlar la comprobacion que se hace al recuperar las mentorizaciones sin puntuar, que se mira si es nulo), tambien las horas por mes a int corto <---





contigopripo@gmail.com

(Cosas futuro)
->Podriamos poner en el futuro de al borrar un usuario, eliminar algunos datos a null o pasarlo a otra tabla de usuarios borrados
->Añadir tambien en un futuro lo de recuperar una cuenta
->Añadir un script periodico para realizar limpieza de la base de datos
->Añadir log de los eventos para quitar todos los souts de las excepciones
->OpenSSL?
->Se les podria indicar en el perfil a los usuarios la cuota de almacenamiento que le queda?


->Revisar excepciones
->Meter logger?
->Meter gancho de salida?
->En el programa de institucion: lista de mentores asociados y verificados con sus puntuaciones y de mentores por verificar
->Cuando un mentor cambia de institución, dejaría de estar validado
->Al buscar por institución, solo saldrían los validados
->Añadir institución a las mentorizaciones
->Quizas habria que cambiar todas las veces que importamos js desde url a desde fichero, por si no hay conexion
->Redistribuir logica a servicios, y  si podemos, las cosas que mapeamos, mapearlas ya de la salida de la base de datos como en todos los ejemplos.
https://auth0.com/blog/how-to-automatically-map-jpa-entities-into-dtos-in-spring-boot-using-mapstruct/






--Enlaces chat
https://www.callicoder.com/spring-boot-websocket-chat-example/
https://spring.io/guides/gs/messaging-stomp-websocket/ <-
https://medium.com/javarevisited/building-persistable-one-to-one-chat-application-using-spring-boot-and-websockets-303ba5d30bb0 <-
https://nulpointerexception.com/2019/05/14/a-tutorial-on-implementing-a-chat-application-like-whatsapp-using-websocket-and-spring/
https://www.oscarblancarteblog.com/2017/02/23/websocket-con-java/
https://stackoverflow.com/questions/26299403/angularjs-and-websockets-beyond/26300758#26300758
https://www.baeldung.com/spring-websockets-send-message-to-user
--Videollamada
https://programmerclick.com/article/65331895648/

--Carga de ficheros:
https://www.codejava.net/frameworks/spring-boot/spring-boot-file-upload-tutorial

https://o7planning.org/11673/spring-boot-file-upload-with-angularjs


-------------------




--Video streaming
https://www.section.io/engineering-education/building-a-video-streaming-app-with-spring/
--Video conferencia
https://doc-kurento.readthedocs.io/en/stable/tutorials/java/tutorial-one2one.html
->Pero requiere ssl
--Calendar
https://stackoverflow.com/questions/54886906/create-google-calendar-event-from-java-backend-from-oauth-authenticated-users-on










Descripcion
Estrada
Salida esperada
Resultado




Sockjs:
https://unpocodejava.com/2018/02/11/que-es-sockjs-y-por-que-usarlo-en-lugar-de-usar-el-api-de-websockets-directamente/












